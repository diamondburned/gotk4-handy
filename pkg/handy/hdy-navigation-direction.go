// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"fmt"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-navigation-direction.go.
var GTypeNavigationDirection = externglib.Type(C.hdy_navigation_direction_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeNavigationDirection, F: marshalNavigationDirection},
	})
}

// NavigationDirection represents direction of a swipe navigation gesture in
// Deck and Leaflet.
type NavigationDirection C.gint

const (
	// NavigationDirectionBack corresponds to start or top, depending on
	// orientation and text direction.
	NavigationDirectionBack NavigationDirection = iota
	// NavigationDirectionForward corresponds to end or bottom, depending on
	// orientation and text direction.
	NavigationDirectionForward
)

func marshalNavigationDirection(p uintptr) (interface{}, error) {
	return NavigationDirection(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for NavigationDirection.
func (n NavigationDirection) String() string {
	switch n {
	case NavigationDirectionBack:
		return "Back"
	case NavigationDirectionForward:
		return "Forward"
	default:
		return fmt.Sprintf("NavigationDirection(%d)", n)
	}
}
