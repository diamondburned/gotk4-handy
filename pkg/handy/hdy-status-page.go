// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-status-page.go.
var GTypeStatusPage = externglib.Type(C.hdy_status_page_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeStatusPage, F: marshalStatusPage},
	})
}

// StatusPageOverrider contains methods that are overridable.
type StatusPageOverrider interface {
}

type StatusPage struct {
	_ [0]func() // equal guard
	gtk.Bin
}

var (
	_ gtk.Binner = (*StatusPage)(nil)
)

func classInitStatusPager(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapStatusPage(obj *externglib.Object) *StatusPage {
	return &StatusPage{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalStatusPage(p uintptr) (interface{}, error) {
	return wrapStatusPage(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewStatusPage creates a new StatusPage.
//
// The function returns the following values:
//
//    - statusPage: new StatusPage.
//
func NewStatusPage() *StatusPage {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_status_page_new()

	var _statusPage *StatusPage // out

	_statusPage = wrapStatusPage(externglib.Take(unsafe.Pointer(_cret)))

	return _statusPage
}

// Description gets the description for self.
//
// The function returns the following values:
//
//    - utf8 (optional): description for self, or NULL.
//
func (self *StatusPage) Description() string {
	var _arg0 *C.HdyStatusPage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.HdyStatusPage)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_status_page_get_description(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// IconName gets the icon name for self.
//
// The function returns the following values:
//
//    - utf8 (optional): icon name for self.
//
func (self *StatusPage) IconName() string {
	var _arg0 *C.HdyStatusPage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.HdyStatusPage)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_status_page_get_icon_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Title gets the title for self.
//
// The function returns the following values:
//
//    - utf8 (optional): title for self, or NULL.
//
func (self *StatusPage) Title() string {
	var _arg0 *C.HdyStatusPage // out
	var _cret *C.gchar         // in

	_arg0 = (*C.HdyStatusPage)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_status_page_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetDescription sets the description for self.
//
// The function takes the following parameters:
//
//    - description (optional): description.
//
func (self *StatusPage) SetDescription(description string) {
	var _arg0 *C.HdyStatusPage // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.HdyStatusPage)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if description != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.hdy_status_page_set_description(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(description)
}

// SetIconName sets the icon name for self.
//
// The function takes the following parameters:
//
//    - iconName (optional): icon name.
//
func (self *StatusPage) SetIconName(iconName string) {
	var _arg0 *C.HdyStatusPage // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.HdyStatusPage)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if iconName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.hdy_status_page_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(iconName)
}

// SetTitle sets the title for self.
//
// The function takes the following parameters:
//
//    - title (optional): title.
//
func (self *StatusPage) SetTitle(title string) {
	var _arg0 *C.HdyStatusPage // out
	var _arg1 *C.gchar         // out

	_arg0 = (*C.HdyStatusPage)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if title != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.hdy_status_page_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
}
