// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-keypad.go.
var GTypeKeypad = externglib.Type(C.hdy_keypad_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeKeypad, F: marshalKeypad},
	})
}

// KeypadOverrider contains methods that are overridable.
type KeypadOverrider interface {
}

type Keypad struct {
	_ [0]func() // equal guard
	gtk.Bin
}

var (
	_ gtk.Binner = (*Keypad)(nil)
)

func classInitKeypadder(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapKeypad(obj *externglib.Object) *Keypad {
	return &Keypad{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalKeypad(p uintptr) (interface{}, error) {
	return wrapKeypad(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewKeypad: create a new Keypad widget.
//
// The function takes the following parameters:
//
//    - symbolsVisible: whether the hash, plus, and asterisk symbols should be
//      visible.
//    - lettersVisible: whether the letters below the digits should be visible.
//
// The function returns the following values:
//
//    - keypad: newly created Keypad widget.
//
func NewKeypad(symbolsVisible, lettersVisible bool) *Keypad {
	var _arg1 C.gboolean   // out
	var _arg2 C.gboolean   // out
	var _cret *C.GtkWidget // in

	if symbolsVisible {
		_arg1 = C.TRUE
	}
	if lettersVisible {
		_arg2 = C.TRUE
	}

	_cret = C.hdy_keypad_new(_arg1, _arg2)
	runtime.KeepAlive(symbolsVisible)
	runtime.KeepAlive(lettersVisible)

	var _keypad *Keypad // out

	_keypad = wrapKeypad(externglib.Take(unsafe.Pointer(_cret)))

	return _keypad
}

// ColumnSpacing returns the amount of space between the columns of self.
//
// The function returns the following values:
//
//    - guint: column spacing of self.
//
func (self *Keypad) ColumnSpacing() uint {
	var _arg0 *C.HdyKeypad // out
	var _cret C.guint      // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_column_spacing(_arg0)
	runtime.KeepAlive(self)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// EndAction returns the widget for the lower right corner (or left, in RTL
// locales) of self.
//
// The function returns the following values:
//
//    - widget (optional): end action widget.
//
func (self *Keypad) EndAction() gtk.Widgetter {
	var _arg0 *C.HdyKeypad // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_end_action(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(gtk.Widgetter)
				return ok
			})
			rv, ok := casted.(gtk.Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// Entry: get the connected entry. See hdy_keypad_set_entry() for details.
//
// The function returns the following values:
//
//    - entry: set Entry or NULL if no widget was set.
//
func (self *Keypad) Entry() *gtk.Entry {
	var _arg0 *C.HdyKeypad // out
	var _cret *C.GtkEntry  // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_entry(_arg0)
	runtime.KeepAlive(self)

	var _entry *gtk.Entry // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_entry = &gtk.Entry{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
			},
			Object: obj,
			CellEditable: gtk.CellEditable{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
			Editable: gtk.Editable{
				Object: obj,
			},
		}
	}

	return _entry
}

// LettersVisible returns whether self should display the standard letters below
// the digits on its buttons.
//
// The function returns the following values:
//
//    - ok: whether the letters below the digits should be visible.
//
func (self *Keypad) LettersVisible() bool {
	var _arg0 *C.HdyKeypad // out
	var _cret C.gboolean   // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_letters_visible(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RowSpacing returns the amount of space between the rows of self.
//
// The function returns the following values:
//
//    - guint: row spacing of self.
//
func (self *Keypad) RowSpacing() uint {
	var _arg0 *C.HdyKeypad // out
	var _cret C.guint      // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_row_spacing(_arg0)
	runtime.KeepAlive(self)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// StartAction returns the widget for the lower left corner (or right, in RTL
// locales) of self.
//
// The function returns the following values:
//
//    - widget (optional): start action widget.
//
func (self *Keypad) StartAction() gtk.Widgetter {
	var _arg0 *C.HdyKeypad // out
	var _cret *C.GtkWidget // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_start_action(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			casted := object.WalkCast(func(obj externglib.Objector) bool {
				_, ok := obj.(gtk.Widgetter)
				return ok
			})
			rv, ok := casted.(gtk.Widgetter)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// SymbolsVisible returns whether self should display the standard letters below
// the digits on its buttons.
//
// Returns Whether self should display the hash and asterisk buttons, and should
// display the plus symbol at the bottom of its 0 button.
//
// The function returns the following values:
//
//    - ok: whether the hash, plus, and asterisk symbols should be visible.
//
func (self *Keypad) SymbolsVisible() bool {
	var _arg0 *C.HdyKeypad // out
	var _cret C.gboolean   // in

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_keypad_get_symbols_visible(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetColumnSpacing sets the amount of space between columns of self.
//
// The function takes the following parameters:
//
//    - spacing: amount of space to insert between columns.
//
func (self *Keypad) SetColumnSpacing(spacing uint) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 C.guint      // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = C.guint(spacing)

	C.hdy_keypad_set_column_spacing(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(spacing)
}

// SetEndAction sets the widget for the lower right corner (or left, in RTL
// locales) of self.
//
// The function takes the following parameters:
//
//    - endAction (optional): end action widget.
//
func (self *Keypad) SetEndAction(endAction gtk.Widgetter) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if endAction != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(externglib.InternObject(endAction).Native()))
	}

	C.hdy_keypad_set_end_action(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(endAction)
}

// SetEntry binds entry to self and blocks any input which wouldn't be possible
// to type with with the keypad.
//
// The function takes the following parameters:
//
//    - entry (optional): Entry.
//
func (self *Keypad) SetEntry(entry *gtk.Entry) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 *C.GtkEntry  // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if entry != nil {
		_arg1 = (*C.GtkEntry)(unsafe.Pointer(externglib.InternObject(entry).Native()))
	}

	C.hdy_keypad_set_entry(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(entry)
}

// SetLettersVisible sets whether self should display the standard letters below
// the digits on its buttons.
//
// The function takes the following parameters:
//
//    - lettersVisible: whether the letters below the digits should be visible.
//
func (self *Keypad) SetLettersVisible(lettersVisible bool) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if lettersVisible {
		_arg1 = C.TRUE
	}

	C.hdy_keypad_set_letters_visible(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(lettersVisible)
}

// SetRowSpacing sets the amount of space between rows of self.
//
// The function takes the following parameters:
//
//    - spacing: amount of space to insert between rows.
//
func (self *Keypad) SetRowSpacing(spacing uint) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 C.guint      // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = C.guint(spacing)

	C.hdy_keypad_set_row_spacing(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(spacing)
}

// SetStartAction sets the widget for the lower left corner (or right, in RTL
// locales) of self.
//
// The function takes the following parameters:
//
//    - startAction (optional): start action widget.
//
func (self *Keypad) SetStartAction(startAction gtk.Widgetter) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 *C.GtkWidget // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if startAction != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(externglib.InternObject(startAction).Native()))
	}

	C.hdy_keypad_set_start_action(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(startAction)
}

// SetSymbolsVisible sets whether self should display the hash and asterisk
// buttons, and should display the plus symbol at the bottom of its 0 button.
//
// The function takes the following parameters:
//
//    - symbolsVisible: whether the hash, plus, and asterisk symbols should be
//      visible.
//
func (self *Keypad) SetSymbolsVisible(symbolsVisible bool) {
	var _arg0 *C.HdyKeypad // out
	var _arg1 C.gboolean   // out

	_arg0 = (*C.HdyKeypad)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if symbolsVisible {
		_arg1 = C.TRUE
	}

	C.hdy_keypad_set_symbols_visible(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(symbolsVisible)
}
