// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_title_bar_get_type()), F: marshalTitleBarrer},
	})
}

type TitleBar struct {
	gtk.Bin
}

var (
	_ gtk.Binner = (*TitleBar)(nil)
)

func wrapTitleBar(obj *externglib.Object) *TitleBar {
	return &TitleBar{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
					Object: obj,
				},
			},
		},
	}
}

func marshalTitleBarrer(p uintptr) (interface{}, error) {
	return wrapTitleBar(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewTitleBar creates a new TitleBar.
func NewTitleBar() *TitleBar {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_title_bar_new()

	var _titleBar *TitleBar // out

	_titleBar = wrapTitleBar(externglib.Take(unsafe.Pointer(_cret)))

	return _titleBar
}

// SelectionMode returns whether whether self is in selection mode.
func (self *TitleBar) SelectionMode() bool {
	var _arg0 *C.HdyTitleBar // out
	var _cret C.gboolean     // in

	_arg0 = (*C.HdyTitleBar)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_title_bar_get_selection_mode(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetSelectionMode sets whether self is in selection mode.
//
// The function takes the following parameters:
//
//    - selectionMode: TRUE to enable the selection mode.
//
func (self *TitleBar) SetSelectionMode(selectionMode bool) {
	var _arg0 *C.HdyTitleBar // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.HdyTitleBar)(unsafe.Pointer(self.Native()))
	if selectionMode {
		_arg1 = C.TRUE
	}

	C.hdy_title_bar_set_selection_mode(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectionMode)
}
