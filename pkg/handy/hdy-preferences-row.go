// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-preferences-row.go.
var GTypePreferencesRow = externglib.Type(C.hdy_preferences_row_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypePreferencesRow, F: marshalPreferencesRow},
	})
}

// PreferencesRowOverrider contains methods that are overridable.
type PreferencesRowOverrider interface {
}

type PreferencesRow struct {
	_ [0]func() // equal guard
	gtk.ListBoxRow
}

var (
	_ gtk.Binner          = (*PreferencesRow)(nil)
	_ externglib.Objector = (*PreferencesRow)(nil)
)

func classInitPreferencesRower(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapPreferencesRow(obj *externglib.Object) *PreferencesRow {
	return &PreferencesRow{
		ListBoxRow: gtk.ListBoxRow{
			Bin: gtk.Bin{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
			Object: obj,
			Actionable: gtk.Actionable{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalPreferencesRow(p uintptr) (interface{}, error) {
	return wrapPreferencesRow(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPreferencesRow creates a new PreferencesRow.
//
// The function returns the following values:
//
//    - preferencesRow: new PreferencesRow.
//
func NewPreferencesRow() *PreferencesRow {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_preferences_row_new()

	var _preferencesRow *PreferencesRow // out

	_preferencesRow = wrapPreferencesRow(externglib.Take(unsafe.Pointer(_cret)))

	return _preferencesRow
}

// Title gets the title of the preference represented by self.
//
// The function returns the following values:
//
//    - utf8 (optional): title of the preference represented by self, or NULL.
//
func (self *PreferencesRow) Title() string {
	var _arg0 *C.HdyPreferencesRow // out
	var _cret *C.gchar             // in

	_arg0 = (*C.HdyPreferencesRow)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_preferences_row_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// UseUnderline gets whether an embedded underline in the text of the title
// indicates a mnemonic. See hdy_preferences_row_set_use_underline().
//
// The function returns the following values:
//
//    - ok: TRUE if an embedded underline in the title indicates the mnemonic
//      accelerator keys.
//
func (self *PreferencesRow) UseUnderline() bool {
	var _arg0 *C.HdyPreferencesRow // out
	var _cret C.gboolean           // in

	_arg0 = (*C.HdyPreferencesRow)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_preferences_row_get_use_underline(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetTitle sets the title of the preference represented by self.
//
// The function takes the following parameters:
//
//    - title (optional): title, or NULL.
//
func (self *PreferencesRow) SetTitle(title string) {
	var _arg0 *C.HdyPreferencesRow // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.HdyPreferencesRow)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if title != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.hdy_preferences_row_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
}

// SetUseUnderline: if true, an underline in the text of the title indicates the
// next character should be used for the mnemonic accelerator key.
//
// The function takes the following parameters:
//
//    - useUnderline: TRUE if underlines in the text indicate mnemonics.
//
func (self *PreferencesRow) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.HdyPreferencesRow // out
	var _arg1 C.gboolean           // out

	_arg0 = (*C.HdyPreferencesRow)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.hdy_preferences_row_set_use_underline(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(useUnderline)
}
