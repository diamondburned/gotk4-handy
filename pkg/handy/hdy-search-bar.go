// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_search_bar_get_type()), F: marshalSearchBarrer},
	})
}

type SearchBar struct {
	gtk.Bin
}

func wrapSearchBar(obj *externglib.Object) *SearchBar {
	return &SearchBar{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
					Object: obj,
				},
			},
		},
	}
}

func marshalSearchBarrer(p uintptr) (interface{}, error) {
	return wrapSearchBar(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSearchBar creates a SearchBar. You will need to tell it about which widget
// is going to be your text entry using hdy_search_bar_connect_entry().
func NewSearchBar() *SearchBar {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_search_bar_new()

	var _searchBar *SearchBar // out

	_searchBar = wrapSearchBar(externglib.Take(unsafe.Pointer(_cret)))

	return _searchBar
}

// ConnectEntry connects the Entry widget passed as the one to be used in this
// search bar. The entry should be a descendant of the search bar. This is only
// required if the entry isn’t the direct child of the search bar (as in our
// main example).
//
// The function takes the following parameters:
//
//    - entry: Entry.
//
func (self *SearchBar) ConnectEntry(entry *gtk.Entry) {
	var _arg0 *C.HdySearchBar // out
	var _arg1 *C.GtkEntry     // out

	_arg0 = (*C.HdySearchBar)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkEntry)(unsafe.Pointer(entry.Native()))

	C.hdy_search_bar_connect_entry(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(entry)
}

// SearchMode returns whether the search mode is on or off.
func (self *SearchBar) SearchMode() bool {
	var _arg0 *C.HdySearchBar // out
	var _cret C.gboolean      // in

	_arg0 = (*C.HdySearchBar)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_search_bar_get_search_mode(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowCloseButton returns whether the close button is shown.
func (self *SearchBar) ShowCloseButton() bool {
	var _arg0 *C.HdySearchBar // out
	var _cret C.gboolean      // in

	_arg0 = (*C.HdySearchBar)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_search_bar_get_show_close_button(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetSearchMode switches the search mode on or off.
//
// The function takes the following parameters:
//
//    - searchMode: new state of the search mode.
//
func (self *SearchBar) SetSearchMode(searchMode bool) {
	var _arg0 *C.HdySearchBar // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.HdySearchBar)(unsafe.Pointer(self.Native()))
	if searchMode {
		_arg1 = C.TRUE
	}

	C.hdy_search_bar_set_search_mode(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(searchMode)
}

// SetShowCloseButton shows or hides the close button. Applications that already
// have a “search” toggle button should not show a close button in their search
// bar, as it duplicates the role of the toggle button.
//
// The function takes the following parameters:
//
//    - visible: whether the close button will be shown or not.
//
func (self *SearchBar) SetShowCloseButton(visible bool) {
	var _arg0 *C.HdySearchBar // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.HdySearchBar)(unsafe.Pointer(self.Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.hdy_search_bar_set_show_close_button(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(visible)
}
