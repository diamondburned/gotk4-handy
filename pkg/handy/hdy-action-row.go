// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_action_row_get_type()), F: marshalActionRower},
	})
}

// ActionRowOverrider contains methods that are overridable.
//
// As of right now, interface overriding and subclassing is not supported
// yet, so the interface currently has no use.
type ActionRowOverrider interface {
	Activate()
}

type ActionRow struct {
	PreferencesRow
}

var (
	_ gtk.Binner          = (*ActionRow)(nil)
	_ externglib.Objector = (*ActionRow)(nil)
)

func wrapActionRow(obj *externglib.Object) *ActionRow {
	return &ActionRow{
		PreferencesRow: PreferencesRow{
			ListBoxRow: gtk.ListBoxRow{
				Bin: gtk.Bin{
					Container: gtk.Container{
						Widget: gtk.Widget{
							InitiallyUnowned: externglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: gtk.Buildable{
								Object: obj,
							},
						},
					},
				},
				Object: obj,
				Actionable: gtk.Actionable{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalActionRower(p uintptr) (interface{}, error) {
	return wrapActionRow(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewActionRow creates a new ActionRow.
func NewActionRow() *ActionRow {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_action_row_new()

	var _actionRow *ActionRow // out

	_actionRow = wrapActionRow(externglib.Take(unsafe.Pointer(_cret)))

	return _actionRow
}

func (self *ActionRow) Activate() {
	var _arg0 *C.HdyActionRow // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	C.hdy_action_row_activate(_arg0)
	runtime.KeepAlive(self)
}

// AddPrefix adds a prefix widget to self.
//
// The function takes the following parameters:
//
//    - widget: prefix widget.
//
func (self *ActionRow) AddPrefix(widget gtk.Widgetter) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))

	C.hdy_action_row_add_prefix(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// ActivatableWidget gets the widget activated when self is activated.
func (self *ActionRow) ActivatableWidget() gtk.Widgetter {
	var _arg0 *C.HdyActionRow // out
	var _cret *C.GtkWidget    // in

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_action_row_get_activatable_widget(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			rv, ok := (externglib.CastObject(object)).(gtk.Widgetter)
			if !ok {
				panic("object of type " + object.TypeFromInstance().String() + " is not gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// IconName gets the icon name for self.
func (self *ActionRow) IconName() string {
	var _arg0 *C.HdyActionRow // out
	var _cret *C.gchar        // in

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_action_row_get_icon_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Subtitle gets the subtitle for self.
func (self *ActionRow) Subtitle() string {
	var _arg0 *C.HdyActionRow // out
	var _cret *C.gchar        // in

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_action_row_get_subtitle(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SubtitleLines gets the number of lines at the end of which the subtitle label
// will be ellipsized. If the value is 0, the number of lines won't be limited.
func (self *ActionRow) SubtitleLines() int {
	var _arg0 *C.HdyActionRow // out
	var _cret C.gint          // in

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_action_row_get_subtitle_lines(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// TitleLines gets the number of lines at the end of which the title label will
// be ellipsized. If the value is 0, the number of lines won't be limited.
func (self *ActionRow) TitleLines() int {
	var _arg0 *C.HdyActionRow // out
	var _cret C.gint          // in

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_action_row_get_title_lines(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// UseUnderline gets whether an embedded underline in the text of the title and
// subtitle labels indicates a mnemonic. See hdy_action_row_set_use_underline().
func (self *ActionRow) UseUnderline() bool {
	var _arg0 *C.HdyActionRow // out
	var _cret C.gboolean      // in

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_action_row_get_use_underline(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetActivatableWidget sets the widget to activate when self is activated,
// either by clicking on it, by calling hdy_action_row_activate(), or via
// mnemonics in the title or the subtitle. See the “use_underline” property to
// enable mnemonics.
//
// The target widget will be activated by emitting the
// GtkWidget::mnemonic-activate signal on it.
//
// The function takes the following parameters:
//
//    - widget: target Widget, or NULL to unset.
//
func (self *ActionRow) SetActivatableWidget(widget gtk.Widgetter) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	if widget != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(widget.Native()))
	}

	C.hdy_action_row_set_activatable_widget(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(widget)
}

// SetIconName sets the icon name for self.
//
// The function takes the following parameters:
//
//    - iconName: icon name.
//
func (self *ActionRow) SetIconName(iconName string) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(iconName)))
	defer C.free(unsafe.Pointer(_arg1))

	C.hdy_action_row_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(iconName)
}

// SetSubtitle sets the subtitle for self.
//
// The function takes the following parameters:
//
//    - subtitle: subtitle.
//
func (self *ActionRow) SetSubtitle(subtitle string) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 *C.gchar        // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	if subtitle != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(subtitle)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.hdy_action_row_set_subtitle(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(subtitle)
}

// SetSubtitleLines sets the number of lines at the end of which the subtitle
// label will be ellipsized. If the value is 0, the number of lines won't be
// limited.
//
// The function takes the following parameters:
//
//    - subtitleLines: number of lines at the end of which the subtitle label
//    will be ellipsized.
//
func (self *ActionRow) SetSubtitleLines(subtitleLines int) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 C.gint          // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	_arg1 = C.gint(subtitleLines)

	C.hdy_action_row_set_subtitle_lines(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(subtitleLines)
}

// SetTitleLines sets the number of lines at the end of which the title label
// will be ellipsized. If the value is 0, the number of lines won't be limited.
//
// The function takes the following parameters:
//
//    - titleLines: number of lines at the end of which the title label will be
//    ellipsized.
//
func (self *ActionRow) SetTitleLines(titleLines int) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 C.gint          // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	_arg1 = C.gint(titleLines)

	C.hdy_action_row_set_title_lines(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(titleLines)
}

// SetUseUnderline: if true, an underline in the text of the title and subtitle
// labels indicates the next character should be used for the mnemonic
// accelerator key.
//
// The function takes the following parameters:
//
//    - useUnderline: TRUE if underlines in the text indicate mnemonics.
//
func (self *ActionRow) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.HdyActionRow // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.HdyActionRow)(unsafe.Pointer(self.Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.hdy_action_row_set_use_underline(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(useUnderline)
}

// ConnectActivated: this signal is emitted after the row has been activated.
func (self *ActionRow) ConnectActivated(f func()) externglib.SignalHandle {
	return self.Connect("activated", f)
}
