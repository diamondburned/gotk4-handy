// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-window.go.
var GTypeWindow = externglib.Type(C.hdy_window_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeWindow, F: marshalWindow},
	})
}

// WindowOverrider contains methods that are overridable.
type WindowOverrider interface {
}

type Window struct {
	_ [0]func() // equal guard
	gtk.Window
}

var (
	_ gtk.Binner = (*Window)(nil)
)

func classInitWindower(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapWindow(obj *externglib.Object) *Window {
	return &Window{
		Window: gtk.Window{
			Bin: gtk.Bin{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalWindow(p uintptr) (interface{}, error) {
	return wrapWindow(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewWindow creates a new Window.
//
// The function returns the following values:
//
//    - window: newly created Window.
//
func NewWindow() *Window {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_window_new()

	var _window *Window // out

	_window = wrapWindow(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _window
}
