// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-value-object.go.
var GTypeValueObject = externglib.Type(C.hdy_value_object_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeValueObject, F: marshalValueObject},
	})
}

// ValueObjectOverrider contains methods that are overridable.
type ValueObjectOverrider interface {
}

type ValueObject struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*ValueObject)(nil)
)

func classInitValueObjector(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapValueObject(obj *externglib.Object) *ValueObject {
	return &ValueObject{
		Object: obj,
	}
}

func marshalValueObject(p uintptr) (interface{}, error) {
	return wrapValueObject(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewValueObject: create a new ValueObject.
//
// The function takes the following parameters:
//
//    - value to store.
//
// The function returns the following values:
//
//    - valueObject: new ValueObject.
//
func NewValueObject(value *externglib.Value) *ValueObject {
	var _arg1 *C.GValue         // out
	var _cret *C.HdyValueObject // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.hdy_value_object_new(_arg1)
	runtime.KeepAlive(value)

	var _valueObject *ValueObject // out

	_valueObject = wrapValueObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _valueObject
}

// CopyValue: copy data from the contained #GValue into dest.
//
// The function takes the following parameters:
//
//    - dest with correct type to copy into.
//
func (value *ValueObject) CopyValue(dest *externglib.Value) {
	var _arg0 *C.HdyValueObject // out
	var _arg1 *C.GValue         // out

	_arg0 = (*C.HdyValueObject)(unsafe.Pointer(externglib.InternObject(value).Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(dest.Native()))

	C.hdy_value_object_copy_value(_arg0, _arg1)
	runtime.KeepAlive(value)
	runtime.KeepAlive(dest)
}

// DupString returns a copy of the contained string if the value is of type
// TYPE_STRING.
//
// The function returns the following values:
//
//    - utf8: copy of the contained string.
//
func (value *ValueObject) DupString() string {
	var _arg0 *C.HdyValueObject // out
	var _cret *C.gchar          // in

	_arg0 = (*C.HdyValueObject)(unsafe.Pointer(externglib.InternObject(value).Native()))

	_cret = C.hdy_value_object_dup_string(_arg0)
	runtime.KeepAlive(value)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// String returns the contained string if the value is of type TYPE_STRING.
//
// The function returns the following values:
//
//    - utf8: contained string.
//
func (value *ValueObject) String() string {
	var _arg0 *C.HdyValueObject // out
	var _cret *C.gchar          // in

	_arg0 = (*C.HdyValueObject)(unsafe.Pointer(externglib.InternObject(value).Native()))

	_cret = C.hdy_value_object_get_string(_arg0)
	runtime.KeepAlive(value)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Value: return the contained value.
//
// The function returns the following values:
//
//    - ret: contained #GValue.
//
func (value *ValueObject) Value() *externglib.Value {
	var _arg0 *C.HdyValueObject // out
	var _cret *C.GValue         // in

	_arg0 = (*C.HdyValueObject)(unsafe.Pointer(externglib.InternObject(value).Native()))

	_cret = C.hdy_value_object_get_value(_arg0)
	runtime.KeepAlive(value)

	var _ret *externglib.Value // out

	_ret = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _ret
}
