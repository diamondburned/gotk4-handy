// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-view-switcher-bar.go.
var GTypeViewSwitcherBar = externglib.Type(C.hdy_view_switcher_bar_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeViewSwitcherBar, F: marshalViewSwitcherBar},
	})
}

// ViewSwitcherBarOverrider contains methods that are overridable.
type ViewSwitcherBarOverrider interface {
}

type ViewSwitcherBar struct {
	_ [0]func() // equal guard
	gtk.Bin
}

var (
	_ gtk.Binner = (*ViewSwitcherBar)(nil)
)

func classInitViewSwitcherBarrer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapViewSwitcherBar(obj *externglib.Object) *ViewSwitcherBar {
	return &ViewSwitcherBar{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalViewSwitcherBar(p uintptr) (interface{}, error) {
	return wrapViewSwitcherBar(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewViewSwitcherBar creates a new ViewSwitcherBar widget.
//
// The function returns the following values:
//
//    - viewSwitcherBar: new ViewSwitcherBar.
//
func NewViewSwitcherBar() *ViewSwitcherBar {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_view_switcher_bar_new()

	var _viewSwitcherBar *ViewSwitcherBar // out

	_viewSwitcherBar = wrapViewSwitcherBar(externglib.Take(unsafe.Pointer(_cret)))

	return _viewSwitcherBar
}

// Policy gets the policy of self.
//
// The function returns the following values:
//
//    - viewSwitcherPolicy: policy of self.
//
func (self *ViewSwitcherBar) Policy() ViewSwitcherPolicy {
	var _arg0 *C.HdyViewSwitcherBar   // out
	var _cret C.HdyViewSwitcherPolicy // in

	_arg0 = (*C.HdyViewSwitcherBar)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_view_switcher_bar_get_policy(_arg0)
	runtime.KeepAlive(self)

	var _viewSwitcherPolicy ViewSwitcherPolicy // out

	_viewSwitcherPolicy = ViewSwitcherPolicy(_cret)

	return _viewSwitcherPolicy
}

// Reveal gets whether self should be revealed or not.
//
// The function returns the following values:
//
//    - ok: TRUE if self is revealed, FALSE if not.
//
func (self *ViewSwitcherBar) Reveal() bool {
	var _arg0 *C.HdyViewSwitcherBar // out
	var _cret C.gboolean            // in

	_arg0 = (*C.HdyViewSwitcherBar)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_view_switcher_bar_get_reveal(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Stack: get the Stack being controlled by the ViewSwitcher.
//
// The function returns the following values:
//
//    - stack (optional) or NULL if none has been set.
//
func (self *ViewSwitcherBar) Stack() *gtk.Stack {
	var _arg0 *C.HdyViewSwitcherBar // out
	var _cret *C.GtkStack           // in

	_arg0 = (*C.HdyViewSwitcherBar)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_view_switcher_bar_get_stack(_arg0)
	runtime.KeepAlive(self)

	var _stack *gtk.Stack // out

	if _cret != nil {
		{
			obj := externglib.Take(unsafe.Pointer(_cret))
			_stack = &gtk.Stack{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			}
		}
	}

	return _stack
}

// SetPolicy sets the policy of self.
//
// The function takes the following parameters:
//
//    - policy: new policy.
//
func (self *ViewSwitcherBar) SetPolicy(policy ViewSwitcherPolicy) {
	var _arg0 *C.HdyViewSwitcherBar   // out
	var _arg1 C.HdyViewSwitcherPolicy // out

	_arg0 = (*C.HdyViewSwitcherBar)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = C.HdyViewSwitcherPolicy(policy)

	C.hdy_view_switcher_bar_set_policy(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(policy)
}

// SetReveal sets whether self should be revealed or not.
//
// The function takes the following parameters:
//
//    - reveal: TRUE to reveal self.
//
func (self *ViewSwitcherBar) SetReveal(reveal bool) {
	var _arg0 *C.HdyViewSwitcherBar // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.HdyViewSwitcherBar)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if reveal {
		_arg1 = C.TRUE
	}

	C.hdy_view_switcher_bar_set_reveal(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(reveal)
}

// SetStack sets the Stack to control.
//
// The function takes the following parameters:
//
//    - stack (optional): Stack.
//
func (self *ViewSwitcherBar) SetStack(stack *gtk.Stack) {
	var _arg0 *C.HdyViewSwitcherBar // out
	var _arg1 *C.GtkStack           // out

	_arg0 = (*C.HdyViewSwitcherBar)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if stack != nil {
		_arg1 = (*C.GtkStack)(unsafe.Pointer(externglib.InternObject(stack).Native()))
	}

	C.hdy_view_switcher_bar_set_stack(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(stack)
}
