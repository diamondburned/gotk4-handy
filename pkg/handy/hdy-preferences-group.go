// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_preferences_group_get_type()), F: marshalPreferencesGrouper},
	})
}

type PreferencesGroup struct {
	_ [0]func() // equal guard
	gtk.Bin
}

var (
	_ gtk.Binner = (*PreferencesGroup)(nil)
)

func wrapPreferencesGroup(obj *externglib.Object) *PreferencesGroup {
	return &PreferencesGroup{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalPreferencesGrouper(p uintptr) (interface{}, error) {
	return wrapPreferencesGroup(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPreferencesGroup creates a new PreferencesGroup.
//
// The function returns the following values:
//
//    - preferencesGroup: new PreferencesGroup.
//
func NewPreferencesGroup() *PreferencesGroup {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_preferences_group_new()

	var _preferencesGroup *PreferencesGroup // out

	_preferencesGroup = wrapPreferencesGroup(externglib.Take(unsafe.Pointer(_cret)))

	return _preferencesGroup
}

// The function returns the following values:
//
//    - utf8: description of self.
//
func (self *PreferencesGroup) Description() string {
	var _arg0 *C.HdyPreferencesGroup // out
	var _cret *C.gchar               // in

	_arg0 = (*C.HdyPreferencesGroup)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_preferences_group_get_description(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Title gets the title of self.
//
// The function returns the following values:
//
//    - utf8: title of self.
//
func (self *PreferencesGroup) Title() string {
	var _arg0 *C.HdyPreferencesGroup // out
	var _cret *C.gchar               // in

	_arg0 = (*C.HdyPreferencesGroup)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_preferences_group_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetDescription sets the description for self.
//
// The function takes the following parameters:
//
//    - description: description.
//
func (self *PreferencesGroup) SetDescription(description string) {
	var _arg0 *C.HdyPreferencesGroup // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.HdyPreferencesGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg1))

	C.hdy_preferences_group_set_description(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(description)
}

// SetTitle sets the title for self.
//
// The function takes the following parameters:
//
//    - title: title.
//
func (self *PreferencesGroup) SetTitle(title string) {
	var _arg0 *C.HdyPreferencesGroup // out
	var _arg1 *C.gchar               // out

	_arg0 = (*C.HdyPreferencesGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.hdy_preferences_group_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
}
