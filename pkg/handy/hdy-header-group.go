// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_header_group_child_type_get_type()), F: marshalHeaderGroupChildType},
		{T: externglib.Type(C.hdy_header_group_get_type()), F: marshalHeaderGrouper},
		{T: externglib.Type(C.hdy_header_group_child_get_type()), F: marshalHeaderGroupChilder},
	})
}

// HeaderGroupChildType: this enumeration value describes the child types
// handled by HeaderGroup.
//
// New values may be added to this enumeration over time.
type HeaderGroupChildType int

const (
	// HeaderGroupChildTypeHeaderBar: child is a HeaderBar.
	HeaderGroupChildTypeHeaderBar HeaderGroupChildType = iota
	// HeaderGroupChildTypeGTKHeaderBar: child is a HeaderBar.
	HeaderGroupChildTypeGTKHeaderBar
	// HeaderGroupChildTypeHeaderGroup: child is a HeaderGroup.
	HeaderGroupChildTypeHeaderGroup
)

func marshalHeaderGroupChildType(p uintptr) (interface{}, error) {
	return HeaderGroupChildType(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for HeaderGroupChildType.
func (h HeaderGroupChildType) String() string {
	switch h {
	case HeaderGroupChildTypeHeaderBar:
		return "HeaderBar"
	case HeaderGroupChildTypeGTKHeaderBar:
		return "GTKHeaderBar"
	case HeaderGroupChildTypeHeaderGroup:
		return "HeaderGroup"
	default:
		return fmt.Sprintf("HeaderGroupChildType(%d)", h)
	}
}

type HeaderGroup struct {
	*externglib.Object

	gtk.Buildable
}

func wrapHeaderGroup(obj *externglib.Object) *HeaderGroup {
	return &HeaderGroup{
		Object: obj,
		Buildable: gtk.Buildable{
			Object: obj,
		},
	}
}

func marshalHeaderGrouper(p uintptr) (interface{}, error) {
	return wrapHeaderGroup(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func NewHeaderGroup() *HeaderGroup {
	var _cret *C.HdyHeaderGroup // in

	_cret = C.hdy_header_group_new()

	var _headerGroup *HeaderGroup // out

	_headerGroup = wrapHeaderGroup(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _headerGroup
}

// AddGTKHeaderBar adds header_bar to self. When the widget is destroyed or no
// longer referenced elsewhere, it will be removed from the header group.
//
// The function takes the following parameters:
//
//    - headerBar to add.
//
func (self *HeaderGroup) AddGTKHeaderBar(headerBar *gtk.HeaderBar) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 *C.GtkHeaderBar   // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkHeaderBar)(unsafe.Pointer(headerBar.Native()))

	C.hdy_header_group_add_gtk_header_bar(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(headerBar)
}

// AddHeaderBar adds header_bar to self. When the widget is destroyed or no
// longer referenced elsewhere, it will be removed from the header group.
//
// The function takes the following parameters:
//
//    - headerBar to add.
//
func (self *HeaderGroup) AddHeaderBar(headerBar *HeaderBar) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 *C.HdyHeaderBar   // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdyHeaderBar)(unsafe.Pointer(headerBar.Native()))

	C.hdy_header_group_add_header_bar(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(headerBar)
}

// AddHeaderGroup adds header_group to self. When the nested group is no longer
// referenced elsewhere, it will be removed from the header group.
//
// The function takes the following parameters:
//
//    - headerGroup to add.
//
func (self *HeaderGroup) AddHeaderGroup(headerGroup *HeaderGroup) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 *C.HdyHeaderGroup // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdyHeaderGroup)(unsafe.Pointer(headerGroup.Native()))

	C.hdy_header_group_add_header_group(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(headerGroup)
}

// Children returns the list of children associated with self.
func (self *HeaderGroup) Children() []HeaderGroupChild {
	var _arg0 *C.HdyHeaderGroup // out
	var _cret *C.GSList         // in

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_header_group_get_children(_arg0)
	runtime.KeepAlive(self)

	var _sList []HeaderGroupChild // out

	_sList = make([]HeaderGroupChild, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.HdyHeaderGroupChild)(v)
		var dst HeaderGroupChild // out
		dst = *wrapHeaderGroupChild(externglib.Take(unsafe.Pointer(src)))
		_sList = append(_sList, dst)
	})

	return _sList
}

// DecorateAll gets whether the elements of the group should all receive the
// full decoration.
func (self *HeaderGroup) DecorateAll() bool {
	var _arg0 *C.HdyHeaderGroup // out
	var _cret C.gboolean        // in

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_header_group_get_decorate_all(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveChild removes child from self.
//
// The function takes the following parameters:
//
//    - child to remove.
//
func (self *HeaderGroup) RemoveChild(child *HeaderGroupChild) {
	var _arg0 *C.HdyHeaderGroup      // out
	var _arg1 *C.HdyHeaderGroupChild // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdyHeaderGroupChild)(unsafe.Pointer(child.Native()))

	C.hdy_header_group_remove_child(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}

// RemoveGTKHeaderBar removes header_bar from self.
//
// The function takes the following parameters:
//
//    - headerBar to remove.
//
func (self *HeaderGroup) RemoveGTKHeaderBar(headerBar *gtk.HeaderBar) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 *C.GtkHeaderBar   // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkHeaderBar)(unsafe.Pointer(headerBar.Native()))

	C.hdy_header_group_remove_gtk_header_bar(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(headerBar)
}

// RemoveHeaderBar removes header_bar from self.
//
// The function takes the following parameters:
//
//    - headerBar to remove.
//
func (self *HeaderGroup) RemoveHeaderBar(headerBar *HeaderBar) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 *C.HdyHeaderBar   // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdyHeaderBar)(unsafe.Pointer(headerBar.Native()))

	C.hdy_header_group_remove_header_bar(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(headerBar)
}

// RemoveHeaderGroup removes a nested HeaderGroup from a HeaderGroup.
//
// The function takes the following parameters:
//
//    - headerGroup to remove.
//
func (self *HeaderGroup) RemoveHeaderGroup(headerGroup *HeaderGroup) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 *C.HdyHeaderGroup // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdyHeaderGroup)(unsafe.Pointer(headerGroup.Native()))

	C.hdy_header_group_remove_header_group(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(headerGroup)
}

// SetDecorateAll sets whether the elements of the group should all receive the
// full decoration.
//
// The function takes the following parameters:
//
//    - decorateAll: whether the elements of the group should all receive the
//    full decoration.
//
func (self *HeaderGroup) SetDecorateAll(decorateAll bool) {
	var _arg0 *C.HdyHeaderGroup // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.HdyHeaderGroup)(unsafe.Pointer(self.Native()))
	if decorateAll {
		_arg1 = C.TRUE
	}

	C.hdy_header_group_set_decorate_all(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(decorateAll)
}

// ConnectUpdateDecorationLayouts: this signal is emitted before updating the
// decoration layouts.
func (self *HeaderGroup) ConnectUpdateDecorationLayouts(f func()) externglib.SignalHandle {
	return self.Connect("update-decoration-layouts", f)
}

type HeaderGroupChild struct {
	*externglib.Object
}

func wrapHeaderGroupChild(obj *externglib.Object) *HeaderGroupChild {
	return &HeaderGroupChild{
		Object: obj,
	}
}

func marshalHeaderGroupChilder(p uintptr) (interface{}, error) {
	return wrapHeaderGroupChild(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ChildType gets the child type.
func (self *HeaderGroupChild) ChildType() HeaderGroupChildType {
	var _arg0 *C.HdyHeaderGroupChild    // out
	var _cret C.HdyHeaderGroupChildType // in

	_arg0 = (*C.HdyHeaderGroupChild)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_header_group_child_get_child_type(_arg0)
	runtime.KeepAlive(self)

	var _headerGroupChildType HeaderGroupChildType // out

	_headerGroupChildType = HeaderGroupChildType(_cret)

	return _headerGroupChildType
}

// GTKHeaderBar gets the child HeaderBar. Use
// hdy_header_group_child_get_child_type() to check the child type.
func (self *HeaderGroupChild) GTKHeaderBar() *gtk.HeaderBar {
	var _arg0 *C.HdyHeaderGroupChild // out
	var _cret *C.GtkHeaderBar        // in

	_arg0 = (*C.HdyHeaderGroupChild)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_header_group_child_get_gtk_header_bar(_arg0)
	runtime.KeepAlive(self)

	var _headerBar *gtk.HeaderBar // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_headerBar = &gtk.HeaderBar{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
					Object: obj,
				},
			},
		}
	}

	return _headerBar
}

// HeaderBar gets the child HeaderBar. Use
// hdy_header_group_child_get_child_type() to check the child type.
func (self *HeaderGroupChild) HeaderBar() *HeaderBar {
	var _arg0 *C.HdyHeaderGroupChild // out
	var _cret *C.HdyHeaderBar        // in

	_arg0 = (*C.HdyHeaderGroupChild)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_header_group_child_get_header_bar(_arg0)
	runtime.KeepAlive(self)

	var _headerBar *HeaderBar // out

	_headerBar = wrapHeaderBar(externglib.Take(unsafe.Pointer(_cret)))

	return _headerBar
}

// HeaderGroup gets the child HeaderGroup. Use
// hdy_header_group_child_get_child_type() to check the child type.
func (self *HeaderGroupChild) HeaderGroup() *HeaderGroup {
	var _arg0 *C.HdyHeaderGroupChild // out
	var _cret *C.HdyHeaderGroup      // in

	_arg0 = (*C.HdyHeaderGroupChild)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_header_group_child_get_header_group(_arg0)
	runtime.KeepAlive(self)

	var _headerGroup *HeaderGroup // out

	_headerGroup = wrapHeaderGroup(externglib.Take(unsafe.Pointer(_cret)))

	return _headerGroup
}
