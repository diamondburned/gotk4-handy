// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_view_switcher_get_type()), F: marshalViewSwitcherer},
	})
}

type ViewSwitcher struct {
	gtk.Bin
}

var (
	_ gtk.Binner = (*ViewSwitcher)(nil)
)

func wrapViewSwitcher(obj *externglib.Object) *ViewSwitcher {
	return &ViewSwitcher{
		Bin: gtk.Bin{
			Container: gtk.Container{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Object: obj,
					ImplementorIface: atk.ImplementorIface{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalViewSwitcherer(p uintptr) (interface{}, error) {
	return wrapViewSwitcher(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewViewSwitcher creates a new ViewSwitcher widget.
func NewViewSwitcher() *ViewSwitcher {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_view_switcher_new()

	var _viewSwitcher *ViewSwitcher // out

	_viewSwitcher = wrapViewSwitcher(externglib.Take(unsafe.Pointer(_cret)))

	return _viewSwitcher
}

// NarrowEllipsize: get the ellipsizing position of the narrow mode label. See
// hdy_view_switcher_set_narrow_ellipsize().
func (self *ViewSwitcher) NarrowEllipsize() pango.EllipsizeMode {
	var _arg0 *C.HdyViewSwitcher   // out
	var _cret C.PangoEllipsizeMode // in

	_arg0 = (*C.HdyViewSwitcher)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_view_switcher_get_narrow_ellipsize(_arg0)
	runtime.KeepAlive(self)

	var _ellipsizeMode pango.EllipsizeMode // out

	_ellipsizeMode = pango.EllipsizeMode(_cret)

	return _ellipsizeMode
}

// Policy gets the policy of self.
func (self *ViewSwitcher) Policy() ViewSwitcherPolicy {
	var _arg0 *C.HdyViewSwitcher      // out
	var _cret C.HdyViewSwitcherPolicy // in

	_arg0 = (*C.HdyViewSwitcher)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_view_switcher_get_policy(_arg0)
	runtime.KeepAlive(self)

	var _viewSwitcherPolicy ViewSwitcherPolicy // out

	_viewSwitcherPolicy = ViewSwitcherPolicy(_cret)

	return _viewSwitcherPolicy
}

// Stack: get the Stack being controlled by the ViewSwitcher.
//
// See: hdy_view_switcher_set_stack().
func (self *ViewSwitcher) Stack() *gtk.Stack {
	var _arg0 *C.HdyViewSwitcher // out
	var _cret *C.GtkStack        // in

	_arg0 = (*C.HdyViewSwitcher)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_view_switcher_get_stack(_arg0)
	runtime.KeepAlive(self)

	var _stack *gtk.Stack // out

	if _cret != nil {
		{
			obj := externglib.Take(unsafe.Pointer(_cret))
			_stack = &gtk.Stack{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			}
		}
	}

	return _stack
}

// SetNarrowEllipsize: set the mode used to ellipsize the text in narrow mode if
// there is not enough space to render the entire string.
//
// The function takes the following parameters:
//
//    - mode: EllipsizeMode.
//
func (self *ViewSwitcher) SetNarrowEllipsize(mode pango.EllipsizeMode) {
	var _arg0 *C.HdyViewSwitcher   // out
	var _arg1 C.PangoEllipsizeMode // out

	_arg0 = (*C.HdyViewSwitcher)(unsafe.Pointer(self.Native()))
	_arg1 = C.PangoEllipsizeMode(mode)

	C.hdy_view_switcher_set_narrow_ellipsize(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(mode)
}

// SetPolicy sets the policy of self.
//
// The function takes the following parameters:
//
//    - policy: new policy.
//
func (self *ViewSwitcher) SetPolicy(policy ViewSwitcherPolicy) {
	var _arg0 *C.HdyViewSwitcher      // out
	var _arg1 C.HdyViewSwitcherPolicy // out

	_arg0 = (*C.HdyViewSwitcher)(unsafe.Pointer(self.Native()))
	_arg1 = C.HdyViewSwitcherPolicy(policy)

	C.hdy_view_switcher_set_policy(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(policy)
}

// SetStack sets the Stack to control.
//
// The function takes the following parameters:
//
//    - stack: Stack.
//
func (self *ViewSwitcher) SetStack(stack *gtk.Stack) {
	var _arg0 *C.HdyViewSwitcher // out
	var _arg1 *C.GtkStack        // out

	_arg0 = (*C.HdyViewSwitcher)(unsafe.Pointer(self.Native()))
	if stack != nil {
		_arg1 = (*C.GtkStack)(unsafe.Pointer(stack.Native()))
	}

	C.hdy_view_switcher_set_stack(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(stack)
}
