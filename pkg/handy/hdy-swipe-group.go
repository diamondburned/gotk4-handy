// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_swipe_group_get_type()), F: marshalSwipeGrouper},
	})
}

type SwipeGroup struct {
	*externglib.Object

	gtk.Buildable
}

func wrapSwipeGroup(obj *externglib.Object) *SwipeGroup {
	return &SwipeGroup{
		Object: obj,
		Buildable: gtk.Buildable{
			Object: obj,
		},
	}
}

func marshalSwipeGrouper(p uintptr) (interface{}, error) {
	return wrapSwipeGroup(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSwipeGroup: create a new SwipeGroup object.
func NewSwipeGroup() *SwipeGroup {
	var _cret *C.HdySwipeGroup // in

	_cret = C.hdy_swipe_group_new()

	var _swipeGroup *SwipeGroup // out

	_swipeGroup = wrapSwipeGroup(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _swipeGroup
}

// AddSwipeable: when the widget is destroyed or no longer referenced elsewhere,
// it will be removed from the swipe group.
//
// The function takes the following parameters:
//
//    - swipeable to add.
//
func (self *SwipeGroup) AddSwipeable(swipeable Swipeabler) {
	var _arg0 *C.HdySwipeGroup // out
	var _arg1 *C.HdySwipeable  // out

	_arg0 = (*C.HdySwipeGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdySwipeable)(unsafe.Pointer(swipeable.Native()))

	C.hdy_swipe_group_add_swipeable(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(swipeable)
}

// Swipeables returns the list of swipeables associated with self.
func (self *SwipeGroup) Swipeables() []Swipeabler {
	var _arg0 *C.HdySwipeGroup // out
	var _cret *C.GSList        // in

	_arg0 = (*C.HdySwipeGroup)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_swipe_group_get_swipeables(_arg0)
	runtime.KeepAlive(self)

	var _sList []Swipeabler // out

	_sList = make([]Swipeabler, 0, gextras.SListSize(unsafe.Pointer(_cret)))
	gextras.MoveSList(unsafe.Pointer(_cret), false, func(v unsafe.Pointer) {
		src := (*C.HdySwipeable)(v)
		var dst Swipeabler // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type handy.Swipeabler is nil")
			}

			object := externglib.Take(objptr)
			rv, ok := (externglib.CastObject(object)).(Swipeabler)
			if !ok {
				panic("object of type " + object.TypeFromInstance().String() + " is not handy.Swipeabler")
			}
			dst = rv
		}
		_sList = append(_sList, dst)
	})

	return _sList
}

// RemoveSwipeable removes a widget from a SwipeGroup.
//
// The function takes the following parameters:
//
//    - swipeable to remove.
//
func (self *SwipeGroup) RemoveSwipeable(swipeable Swipeabler) {
	var _arg0 *C.HdySwipeGroup // out
	var _arg1 *C.HdySwipeable  // out

	_arg0 = (*C.HdySwipeGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.HdySwipeable)(unsafe.Pointer(swipeable.Native()))

	C.hdy_swipe_group_remove_swipeable(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(swipeable)
}
