// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-application-window.go.
var GTypeApplicationWindow = externglib.Type(C.hdy_application_window_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeApplicationWindow, F: marshalApplicationWindow},
	})
}

// ApplicationWindowOverrider contains methods that are overridable.
type ApplicationWindowOverrider interface {
}

type ApplicationWindow struct {
	_ [0]func() // equal guard
	gtk.ApplicationWindow
}

var (
	_ externglib.Objector = (*ApplicationWindow)(nil)
	_ gtk.Binner          = (*ApplicationWindow)(nil)
)

func classInitApplicationWindower(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapApplicationWindow(obj *externglib.Object) *ApplicationWindow {
	return &ApplicationWindow{
		ApplicationWindow: gtk.ApplicationWindow{
			Window: gtk.Window{
				Bin: gtk.Bin{
					Container: gtk.Container{
						Widget: gtk.Widget{
							InitiallyUnowned: externglib.InitiallyUnowned{
								Object: obj,
							},
							Object: obj,
							ImplementorIface: atk.ImplementorIface{
								Object: obj,
							},
							Buildable: gtk.Buildable{
								Object: obj,
							},
						},
					},
				},
			},
			Object: obj,
			ActionGroup: gio.ActionGroup{
				Object: obj,
			},
			ActionMap: gio.ActionMap{
				Object: obj,
			},
		},
	}
}

func marshalApplicationWindow(p uintptr) (interface{}, error) {
	return wrapApplicationWindow(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewApplicationWindow creates a new ApplicationWindow.
//
// The function returns the following values:
//
//    - applicationWindow: newly created ApplicationWindow.
//
func NewApplicationWindow() *ApplicationWindow {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_application_window_new()

	var _applicationWindow *ApplicationWindow // out

	_applicationWindow = wrapApplicationWindow(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _applicationWindow
}
