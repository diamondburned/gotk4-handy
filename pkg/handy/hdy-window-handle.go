// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_window_handle_get_type()), F: marshalWindowHandler},
	})
}

type WindowHandle struct {
	gtk.EventBox
}

var (
	_ gtk.Binner = (*WindowHandle)(nil)
)

func wrapWindowHandle(obj *externglib.Object) *WindowHandle {
	return &WindowHandle{
		EventBox: gtk.EventBox{
			Bin: gtk.Bin{
				Container: gtk.Container{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Object: obj,
						ImplementorIface: atk.ImplementorIface{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalWindowHandler(p uintptr) (interface{}, error) {
	return wrapWindowHandle(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewWindowHandle creates a new WindowHandle.
func NewWindowHandle() *WindowHandle {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_window_handle_new()

	var _windowHandle *WindowHandle // out

	_windowHandle = wrapWindowHandle(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _windowHandle
}
