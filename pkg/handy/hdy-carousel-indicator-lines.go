// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #cgo pkg-config: libhandy-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.hdy_carousel_indicator_lines_get_type()), F: marshalCarouselIndicatorLinesser},
	})
}

type CarouselIndicatorLines struct {
	gtk.DrawingArea

	gtk.Orientable
	*externglib.Object
}

var (
	_ externglib.Objector = (*CarouselIndicatorLines)(nil)
	_ gtk.Widgetter       = (*CarouselIndicatorLines)(nil)
)

func wrapCarouselIndicatorLines(obj *externglib.Object) *CarouselIndicatorLines {
	return &CarouselIndicatorLines{
		DrawingArea: gtk.DrawingArea{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
				Object: obj,
			},
		},
		Orientable: gtk.Orientable{
			Object: obj,
		},
		Object: obj,
	}
}

func marshalCarouselIndicatorLinesser(p uintptr) (interface{}, error) {
	return wrapCarouselIndicatorLines(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCarouselIndicatorLines: create a new CarouselIndicatorLines widget.
func NewCarouselIndicatorLines() *CarouselIndicatorLines {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_carousel_indicator_lines_new()

	var _carouselIndicatorLines *CarouselIndicatorLines // out

	_carouselIndicatorLines = wrapCarouselIndicatorLines(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _carouselIndicatorLines
}

// Carousel: get the Carousel the indicator uses.
//
// See: hdy_carousel_indicator_lines_set_carousel().
func (self *CarouselIndicatorLines) Carousel() *Carousel {
	var _arg0 *C.HdyCarouselIndicatorLines // out
	var _cret *C.HdyCarousel               // in

	_arg0 = (*C.HdyCarouselIndicatorLines)(unsafe.Pointer(self.Native()))

	_cret = C.hdy_carousel_indicator_lines_get_carousel(_arg0)
	runtime.KeepAlive(self)

	var _carousel *Carousel // out

	if _cret != nil {
		_carousel = wrapCarousel(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _carousel
}

// SetCarousel sets the Carousel to use.
//
// The function takes the following parameters:
//
//    - carousel: Carousel.
//
func (self *CarouselIndicatorLines) SetCarousel(carousel *Carousel) {
	var _arg0 *C.HdyCarouselIndicatorLines // out
	var _arg1 *C.HdyCarousel               // out

	_arg0 = (*C.HdyCarouselIndicatorLines)(unsafe.Pointer(self.Native()))
	if carousel != nil {
		_arg1 = (*C.HdyCarousel)(unsafe.Pointer(carousel.Native()))
	}

	C.hdy_carousel_indicator_lines_set_carousel(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(carousel)
}
