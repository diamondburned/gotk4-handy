// Code generated by girgen. DO NOT EDIT.

package handy

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <handy.h>
import "C"

// glib.Type values for hdy-carousel-indicator-lines.go.
var GTypeCarouselIndicatorLines = externglib.Type(C.hdy_carousel_indicator_lines_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeCarouselIndicatorLines, F: marshalCarouselIndicatorLines},
	})
}

// CarouselIndicatorLinesOverrider contains methods that are overridable.
type CarouselIndicatorLinesOverrider interface {
}

type CarouselIndicatorLines struct {
	_ [0]func() // equal guard
	gtk.DrawingArea

	*externglib.Object
	gtk.Orientable
}

var (
	_ externglib.Objector = (*CarouselIndicatorLines)(nil)
	_ gtk.Widgetter       = (*CarouselIndicatorLines)(nil)
)

func classInitCarouselIndicatorLinesser(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCarouselIndicatorLines(obj *externglib.Object) *CarouselIndicatorLines {
	return &CarouselIndicatorLines{
		DrawingArea: gtk.DrawingArea{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
			},
		},
		Object: obj,
		Orientable: gtk.Orientable{
			Object: obj,
		},
	}
}

func marshalCarouselIndicatorLines(p uintptr) (interface{}, error) {
	return wrapCarouselIndicatorLines(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCarouselIndicatorLines: create a new CarouselIndicatorLines widget.
//
// The function returns the following values:
//
//    - carouselIndicatorLines: newly created CarouselIndicatorLines widget.
//
func NewCarouselIndicatorLines() *CarouselIndicatorLines {
	var _cret *C.GtkWidget // in

	_cret = C.hdy_carousel_indicator_lines_new()

	var _carouselIndicatorLines *CarouselIndicatorLines // out

	_carouselIndicatorLines = wrapCarouselIndicatorLines(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _carouselIndicatorLines
}

// Carousel: get the Carousel the indicator uses.
//
// See: hdy_carousel_indicator_lines_set_carousel().
//
// The function returns the following values:
//
//    - carousel (optional) or NULL if none has been set.
//
func (self *CarouselIndicatorLines) Carousel() *Carousel {
	var _arg0 *C.HdyCarouselIndicatorLines // out
	var _cret *C.HdyCarousel               // in

	_arg0 = (*C.HdyCarouselIndicatorLines)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.hdy_carousel_indicator_lines_get_carousel(_arg0)
	runtime.KeepAlive(self)

	var _carousel *Carousel // out

	if _cret != nil {
		_carousel = wrapCarousel(externglib.Take(unsafe.Pointer(_cret)))
	}

	return _carousel
}

// SetCarousel sets the Carousel to use.
//
// The function takes the following parameters:
//
//    - carousel (optional): Carousel.
//
func (self *CarouselIndicatorLines) SetCarousel(carousel *Carousel) {
	var _arg0 *C.HdyCarouselIndicatorLines // out
	var _arg1 *C.HdyCarousel               // out

	_arg0 = (*C.HdyCarouselIndicatorLines)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if carousel != nil {
		_arg1 = (*C.HdyCarousel)(unsafe.Pointer(externglib.InternObject(carousel).Native()))
	}

	C.hdy_carousel_indicator_lines_set_carousel(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(carousel)
}
